<?php

namespace LittleBigJoe\Bundle\CoreBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * BrandRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BrandRepository extends EntityRepository
{
    /**
     * Return the number of brands
     *
     * @param boolean/null $visible :
     *        if set to null, return all brands
     * @return int nbUsers
     */
    public function count()
    {
        return $this->createQueryBuilder('b')
            ->select('COUNT(b)')
            ->getQuery()
            ->getSingleScalarResult();
    }

    /**
     * Find by slug, indepently from the language
     *
     * @param string $slug : contains slug
     * @return object entity
     */
    public function findBySlugI18n($slug)
    {
        return $this->getEntityManager()
            ->createQuery('SELECT b FROM LittleBigJoeCoreBundle:Brand b WHERE b.slug LIKE :slug')
            ->setParameter('slug', '%' . $slug . '%')
            ->setHint(
                \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
                'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
            )
            ->getSingleResult();
    }

    /**
     * Return brands associated to latest projects
     *
     * @param integer $limit : return the $limit brands associated to latest projects
     * @return array latestBrands
     */
    public function findLatestByProject($limit = 3)
    {
        return $this->createQueryBuilder('b')
            ->select('b, p')
            ->leftJoin('b.projects', 'p')
            ->where('p.deletedAt IS NULL')
            ->groupBy('p.brand')
            ->orderBy('p.id', 'DESC')
            ->setMaxResults($limit)
            ->getQuery()
            ->getResult();
    }

    /**
     * Return most desired brands (brands that have many associated projects)
     *
     * @param integer $limit : return the $limit most desired brands (brands that have many associated projects)
     * @return array mostDesiredBrands
     */
    public function findMostDesired($limit = 3)
    {
        $qb = $this->createQueryBuilder('b')
            ->addSelect('COUNT(p) AS HIDDEN nbProjects')
            ->leftJoin('b.projects', 'p')
            ->where('p.deletedAt IS NULL');

        if (!empty($limit))
            $qb = $qb->setMaxResults($limit);

        return $qb->groupBy('p.brand')
            ->orderBy('nbProjects', 'DESC')
            ->getQuery()
            ->getResult();
    }

    /**
     * Return latest brands
     *
     * @param integer $limit : return the $limit latest brands
     * @return array latestProjects
     */
    public function findLatest($limit = 4)
    {
        return $this->createQueryBuilder('b')
            ->orderBy('b.id', 'DESC')
            ->setMaxResults($limit)
            ->getQuery()
            ->getResult();
    }
}
