<?php

namespace LittleBigJoe\Bundle\CoreBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
    /**
     * Return the number of users
     *
     * @param boolean/null $visible :
     *        if set to null, return all users
     * @return int nbUsers
     */
    public function count()
    {
        return $this->createQueryBuilder('u')
            ->select('COUNT(u)')
            ->getQuery()
            ->getSingleScalarResult();
    }

    /**
     * Return users for specific keyword (used for search)
     *
     * @param string $search : search keyword
     * @return array users
     */
    public function findBySearch($search)
    {
        $qb = $this->createQueryBuilder('u')
            ->where('u.firstname LIKE :search')
            ->orWhere('u.lastname LIKE :search')
            ->setParameter('search', '%' . $search . '%')
        		->andWhere('u.enabled = :enabled')
        		->setParameter('enabled', true)
        		->andWhere('u.locked = :locked')
        		->setParameter('locked', false)
        		->andWhere('u.expired = :expired')
        		->setParameter('expired', false);

        return $qb->orderBy('u.id', 'DESC')
            ->getQuery()
            ->getResult();
    }

    /**
     * Return users for specific role
     *
     * @param string $role : role
     * @return array users
     */
    public function findByRole($role)
    {
        $qb = $this->createQueryBuilder('u')
            ->where('u.roles LIKE :roles')
            ->setParameter('roles', '%"' . $role . '"%');

        return $qb->getQuery()
                  ->getResult();
    }

    /**
     * Return users for specific role and brand
     *
     * @param string $role : role
     * @param string $brand : brand
     * @return array users
     */
    public function findByRoleAndBrand($role, $brand)
    {
        $qb = $this->createQueryBuilder('u')
            ->leftJoin('u.brands', 'b')
            ->where('u.roles LIKE :role')
            ->andWhere('b.id = :brand')
            ->setParameter('role', '%"' . $role . '"%')
            ->setParameter('brand', $brand->getId());

        return $qb->getQuery()
                  ->getResult();
    }
}
